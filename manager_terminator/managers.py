# SPDX-FileCopyrightText: 2023 Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import datetime

from manager_terminator.autogenerated_graphql_client.client import GraphQLClient
from manager_terminator.autogenerated_graphql_client.get_managers import (
    GetManagersManagersObjectsObjects,
)


async def get(mo: GraphQLClient):
    gql_response = await mo.get_managers()

    return [
        manager_obj
        for manager in gql_response.objects
        for manager_obj in manager.objects
    ]


async def termination_objects(managers: list[GetManagersManagersObjectsObjects]):
    termination_objects = []
    now_dt = datetime.datetime.now()

    for manager in managers:
        employees = manager.employee
        employees_engagements = any(e.engagements for e in employees)

        manager_org_units = manager.org_unit

        if employees is None or not employees_engagements:
            termination_objects.append(
                {
                    "uuid": manager.uuid,
                    "termination_date": now_dt.date().isoformat(),
                }
            )

        manager_engagements_termination_to_date_farthest = None

        for e in employees:
            for engagement in e.engagements:
                # Ignore engagements without a validity.to date
                engagement_validity_to = engagement.validity.to
                if not engagement_validity_to:
                    continue

                for eng_org_unit in engagement.org_unit:
                    for manager_org_unit in manager_org_units:
                        # Check if manager-employee-engagment have access to the manager-org_unit
                        if eng_org_unit.uuid != manager_org_unit.uuid:
                            continue

                        # Check if engagement termination date is the farthest
                        if (
                            manager_engagements_termination_to_date_farthest is None
                            or engagement_validity_to
                            > manager_engagements_termination_to_date_farthest
                        ):
                            manager_engagements_termination_to_date_farthest = (
                                engagement_validity_to
                            )

        # Finally add manager termination object
        if manager_engagements_termination_to_date_farthest:
            # TODO: Only create termination object if "manager_engagements_termination_to_date_farthest"
            # is later than manager.validity.to
            if (
                manager.validity.to
                and manager.validity.to
                >= manager_engagements_termination_to_date_farthest
            ):
                continue

            termination_objects.append(
                {
                    "uuid": manager.uuid,
                    "termination_date": manager_engagements_termination_to_date_farthest,
                }
            )

    return termination_objects
